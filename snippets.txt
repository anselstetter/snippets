/**
 * Find the distance between 2 coordinates in meter
 */
+ (double)distanceFrom:(CLLocationCoordinate2D)locationA to:(CLLocationCoordinate2D)locationB {
    double R = 6368500.0; // Earth in meters
    
    double lat1 = locationA.latitude * M_PI / 180.0;
    double lon1 = locationA.longitude * M_PI / 180.0;
    double lat2 = locationB.latitude * M_PI / 180.0;
    double lon2 = locationB.longitude * M_PI / 180.0;
    
    return acos(sin(lat1) * sin(lat2) + 
                cos(lat1) * cos(lat2) *
                cos(lon2 - lon1)) * R;
}

-----------------------------------------------------------------------------------

/**
 * Fast nested NSMutableArray alternative
 */
+ (double **)createDoubleArrayWithRows:(int)rows andColumns:(int)cols {
	double **array = calloc(rows, sizeof(double *));
	
	unsigned int i = 0;
	for (i = 0; i < rows; ++i) {
		array[i] = calloc(cols, sizeof(double));
	}
	return array;
}

+ (void)freeDoubleArray:(double**)array rows:(int)rows andColumns:(int)cols {
	unsigned int i = 0;
	for (i = 0; i < rows; i++) {
		free(array[i]);
		array[i] = NULL;
	}
	free(array);
	array = NULL;
}


double **d = [self createDoubleArrayWithRows:14 andColumns:3];

double item = d[0][0];

[<Class> freeDoubleArray:d rows:14 andColumns:3];

-----------------------------------------------------------------------------------

/**
 * @param frag              The Fragment whose parent is to be found
 * @param callbackInterface The interface class that the parent should implement
 * @return The parent of frag that implements the callbackInterface or null
 * if no such parent can be found
 */
@SuppressWarnings("unchecked")
public static <T> T getParent(Fragment frag, Class<T> callbackInterface) {
    Fragment parentFragment = frag.getParentFragment();

    while (parentFragment != null) {
        if (callbackInterface.isInstance(parentFragment)) {
            return (T) parentFragment;
        }
        parentFragment = parentFragment.getParentFragment();
    }

    FragmentActivity activity = frag.getActivity();
    if (activity != null && callbackInterface.isInstance(activity)) {
        return (T) activity;
    }

    return null;
}

